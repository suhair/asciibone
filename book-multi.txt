Backbone Trainer
===============================
Suhair Hassan E
v0.1, 2011-07
:doctype: book


Backbone Walkthrough
==========================
Model and View
--------------
Backbone is developed around the MVC paradigm and it is logical to get started with the Model itself. Model encapsulates the domain data and logic. Let's dive into backbone by creating the infamous ToDo model.

Prepare the Stage
~~~~~~~~~~~~~~~~~~~
Start by creating a folder todo_app and an index.html file inside it. Reference the required javscript libraries in index.html and place the initialization code as follows.

.Initial index.html 
-------------------------------------------------------------------------
<!DOCTYPE HTML>
<html lang="en">
<head>
  <script src="http://documentcloud.github.com/backbone/test/vendor/jquery-1.5.js" type="text/javascript"></script> <1>
  <script src="http://documentcloud.github.com/backbone/test/vendor/underscore-1.1.6.js" type="text/javascript"></script> <2>
  <script src="http://documentcloud.github.com/backbone/backbone.js" type="text/javascript"></script> <3>
</head>
<body>
  <script type="text/javascript">
    $(function(){
      // The code goes here <4>    
    });
  </script>
</body>
</html>
-------------------------------------------------------------------------
<1> Jquery library 
<2> Underscore library to provide support for the backbonejs
<3> Backbone library
<4> All application code will be executed inside jquery document ready event

Create ToDo model prototype
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Before creating a ToDo object inside the Backbone, we have to create its blueprint. Backbone gives the Model object from which our domain models could be extended from. 

.ToDo model blueprint
--------------------------------------------------------------------------
var ToDo = Backbone.Model.extend({
  // properties of the domain model to be added <1>         
});

console.info(ToDo); <2>
--------------------------------------------------------------------------
<1> Instance properties of the ToDo model is passed as the first argument to extend
<2> Let's dump this blueprint to the firebug's console so that we can have a close look

Here is the console's out put.


.ToDo Model in Firebug 
image::images/console_todo_blueprint_info.jpg[Model blue print output in Firebug]

So the ToDo variable we have is just a constructor function and it could be used for creating our todo objects.

Creating a ToDo object
~~~~~~~~~~~~~~~~~~~~~~

Let's create a todo object and explore it in console.

.Creating a ToDo object
----------------------------------------------------------------------------
$(function(){
  var ToDo = Backbone.Model.extend({
        
  });
        
  var todo = new ToDo(); <1>

  console.info(todo); <2>
});
----------------------------------------------------------------------------
<1> Create a todo object from our model constructor
<2> Dump the created object to the console

.ToDo Object in Firebug 
image::images/console_todo_object_info.jpg[ToDo object output in Firebug]

We can interpret from the Firebug output that, extending from the Backbone's Model has paid off and our brand new todo object has got a few properties and methods as a reward. From the output, it is obvious that the attributes property of the todo object is empty and the next step is to provide the default values for the todo attributes.

Provide deafult attribute values for the todo object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
So far we have created only a single todo object. It is currently in blank state and our task is to provide default values for the todo object. One option is to provide the default values in the ToDo prototype and all of the new todo objects will have those defaults. Backbone model has a defaults property just for this purpose.

.Providing default attributes for the model
----------------------------------------------------------------------------
var ToDo = Backbone.Model.extend({
    defaults: {
        content: "What do you want to do?", <1>
        order: 0, <2>
        done: false <3>
    }        
});
----------------------------------------------------------------------------
<1> The instructions of the todo object
<2> The priority order of the todo object
<3> Current status of the todo object, whether it is completed or not.


.todo object with default attributes
image::images/console_todo_model_defaults.png[todo object default attributes in Firebug]
